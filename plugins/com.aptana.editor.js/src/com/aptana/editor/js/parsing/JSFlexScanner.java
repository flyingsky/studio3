/* The following code was generated by JFlex 1.4.3 on 10/17/11 10:40 AM */

package com.aptana.editor.js.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import beaver.Symbol;
import beaver.Scanner;

import com.aptana.editor.js.parsing.lexer.JSTokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/17/11 10:40 AM from the specification file
 * <tt>JS.flex</tt>
 */
public class JSFlexScanner extends Scanner
{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REGEX = 4;
  public static final int DIVISION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\51\1\14"+
    "\1\0\1\3\1\54\1\52\1\16\1\62\1\63\1\20\1\13\1\70"+
    "\1\55\1\11\1\17\1\6\11\4\1\71\1\61\1\50\1\47\1\46"+
    "\1\57\1\0\4\10\1\12\1\10\24\3\1\64\1\15\1\65\1\56"+
    "\1\3\1\0\1\26\1\24\1\30\1\40\1\23\1\22\1\21\1\33"+
    "\1\36\1\21\1\27\1\41\1\21\1\35\1\34\1\44\1\21\1\25"+
    "\1\31\1\32\1\37\1\45\1\43\1\7\1\42\1\21\1\66\1\53"+
    "\1\67\1\60\u05e1\0\12\5\206\0\12\5\u026c\0\12\5\166\0\12\5"+
    "\166\0\12\5\166\0\12\5\166\0\12\5\167\0\11\5\166\0\12\5"+
    "\166\0\12\5\166\0\12\5\340\0\12\5\166\0\12\5\106\0\12\5"+
    "\u0116\0\12\5\u031f\0\11\5\u046e\0\12\5\46\0\12\5\u012c\0\12\5"+
    "\ue5c0\0\12\5\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\6\2\1"+
    "\1\7\1\10\14\3\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\1"+
    "\2\35\1\4\1\0\1\36\1\37\1\0\1\40\1\1"+
    "\1\0\1\1\1\41\1\0\1\42\17\3\1\43\1\44"+
    "\1\3\1\45\4\3\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\2\0\1\64\1\0\1\4\2\0\1\41"+
    "\1\65\2\0\1\3\1\66\12\3\1\67\3\3\1\70"+
    "\6\3\1\71\1\3\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\4\3\0\1\100\1\0\3\3\1\101\2\3"+
    "\1\102\4\3\1\103\1\3\1\104\1\3\1\105\4\3"+
    "\1\106\1\107\1\110\1\100\1\111\1\112\2\3\1\113"+
    "\1\3\1\114\2\3\1\115\4\3\1\116\2\3\1\117"+
    "\1\3\1\120\1\121\2\3\1\122\1\123\3\3\1\124"+
    "\1\125\1\126\2\3\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\u077a\0\u07b4\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\256\0\256\0\u0910\0\256\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\256\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0122\0\u0dd2\0\u0e0c\0\u0122"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\256\0\u0f68\0\256"+
    "\0\u0fa2\0\u0fdc\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u1016\0\u1050\0\u1016\0\u108a\0\u08d6"+
    "\0\u094a\0\u09be\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u0122"+
    "\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c"+
    "\0\u13b6\0\u13f0\0\u0122\0\u142a\0\u1464\0\u149e\0\u0122\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u0122\0\u1634\0\u166e"+
    "\0\256\0\256\0\256\0\256\0\u16a8\0\u16e2\0\u16e2\0\u171c"+
    "\0\u1756\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u0122\0\u1878"+
    "\0\u18b2\0\u0122\0\u18ec\0\u1926\0\u1960\0\u199a\0\u0122\0\u19d4"+
    "\0\u0122\0\u1a0e\0\u0122\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u0122"+
    "\0\u0122\0\256\0\256\0\256\0\u0122\0\u1b30\0\u1b6a\0\u0122"+
    "\0\u1ba4\0\u0122\0\u1bde\0\u1c18\0\u0122\0\u1c52\0\u1c8c\0\u1cc6"+
    "\0\u1d00\0\u0122\0\u1d3a\0\u1d74\0\u0122\0\u1dae\0\u0122\0\u0122"+
    "\0\u1de8\0\u1e22\0\u0122\0\u0122\0\u1e5c\0\u1e96\0\u1ed0\0\u0122"+
    "\0\u0122\0\u0122\0\u1f0a\0\u1f44\0\u0122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\2\7\1\10\2\6\1\11\1\6"+
    "\1\12\1\13\1\4\1\14\1\15\1\16\1\6\1\17"+
    "\1\20\1\21\1\22\2\6\1\23\1\24\1\25\2\6"+
    "\1\26\1\27\1\6\1\30\2\6\1\31\1\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\4\2\5\11\4\1\57"+
    "\1\4\1\57\1\60\53\4\2\5\11\4\1\57\1\4"+
    "\1\57\1\61\52\4\73\0\2\5\72\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\25\6\30\0\3\7\2\0"+
    "\1\62\64\0\3\7\1\63\1\0\1\62\64\0\3\62"+
    "\76\0\1\64\33\0\1\65\22\0\1\66\1\0\12\66"+
    "\1\67\1\70\54\66\1\71\1\0\13\71\1\72\1\67"+
    "\53\71\17\0\1\73\1\74\120\0\1\75\25\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\5\6\1\76\5\6"+
    "\1\77\1\6\1\100\1\101\6\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\20\6\1\102\4\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\4\6\1\103"+
    "\20\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\2\6\1\104\22\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\5\6\1\105\5\6\1\106\11\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\22\6\1\107"+
    "\2\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\4\6\1\110\5\6\1\111\6\6\1\112\3\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\2\6\1\113"+
    "\13\6\1\114\6\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\1\6\1\115\12\6\1\116\10\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\2\6\1\117"+
    "\10\6\1\120\11\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\12\6\1\121\2\6\1\122\7\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\5\6\1\123"+
    "\5\6\1\124\11\6\72\0\1\125\1\126\71\0\1\127"+
    "\71\0\1\130\1\131\70\0\1\132\71\0\1\133\2\0"+
    "\1\134\66\0\1\135\3\0\1\136\65\0\1\137\71\0"+
    "\1\140\5\0\1\141\63\0\1\142\37\0\1\4\123\0"+
    "\1\143\22\0\1\144\1\0\13\144\1\145\1\144\1\0"+
    "\27\144\1\146\22\144\4\0\3\62\3\0\1\147\10\0"+
    "\1\147\52\0\1\150\1\0\1\150\1\0\1\150\1\0"+
    "\1\150\7\0\3\150\1\0\1\150\1\0\1\150\7\0"+
    "\1\150\31\0\1\66\1\0\12\66\1\67\1\151\146\66"+
    "\1\71\1\0\13\71\1\152\1\67\145\71\1\153\1\0"+
    "\15\153\1\154\52\153\20\155\1\156\51\155\3\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\20\6\1\157\4\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\4\6"+
    "\1\160\20\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\14\6\1\161\10\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\14\6\1\162\10\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\10\6\1\163\14\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\2\6"+
    "\1\164\22\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\11\6\1\165\13\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\10\6\1\166\1\167\13\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\14\6\1\170"+
    "\10\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\15\6\1\171\7\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\16\6\1\172\2\6\1\173\3\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\4\6\1\174"+
    "\10\6\1\175\7\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\23\6\1\176\1\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\22\6\1\177\2\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\20\6\1\200"+
    "\4\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\10\6\1\201\14\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\1\6\1\202\16\6\1\203\4\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\15\6\1\204"+
    "\7\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\11\6\1\205\13\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\4\6\1\206\20\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\15\6\1\207\7\6\72\0"+
    "\1\210\1\211\71\0\1\212\71\0\1\213\71\0\1\214"+
    "\22\0\1\144\1\0\13\144\1\145\1\144\1\215\53\144"+
    "\1\0\70\144\4\0\3\216\4\0\1\217\41\0\1\217"+
    "\14\0\1\153\1\0\70\153\1\154\1\0\70\154\20\155"+
    "\1\220\51\155\17\221\1\222\1\223\51\221\3\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\10\6\1\224\14\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\5\6"+
    "\1\225\17\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\7\6\1\226\15\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\2\6\1\227\22\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\5\6\1\230\17\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\16\6"+
    "\1\231\6\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\2\6\1\232\22\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\7\6\1\233\15\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\10\6\1\234\1\235"+
    "\13\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\11\6\1\236\13\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\2\6\1\237\22\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\13\6\1\240\11\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\10\6\1\241"+
    "\14\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\2\6\1\242\22\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\20\6\1\243\4\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\11\6\1\244\13\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\5\6\1\245"+
    "\17\6\27\0\2\6\1\0\3\6\1\0\1\6\6\0"+
    "\2\6\1\246\22\6\27\0\2\6\1\0\3\6\1\0"+
    "\1\6\6\0\20\6\1\247\4\6\27\0\2\6\1\0"+
    "\3\6\1\0\1\6\6\0\12\6\1\250\12\6\27\0"+
    "\2\6\1\0\3\6\1\0\1\6\6\0\17\6\1\251"+
    "\5\6\73\0\1\252\31\0\1\215\11\0\25\215\30\0"+
    "\3\216\63\0\17\155\1\253\1\220\51\155\20\221\1\223"+
    "\70\221\1\254\1\223\51\221\3\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\2\6\1\255\22\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\20\6\1\256\4\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\11\6"+
    "\1\257\13\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\6\6\1\260\16\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\4\6\1\261\20\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\12\6\1\262\12\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\11\6"+
    "\1\206\13\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\15\6\1\263\7\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\7\6\1\264\15\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\22\6\1\265\2\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\13\6"+
    "\1\266\11\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\5\6\1\267\17\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\16\6\1\270\6\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\11\6\1\271\13\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\2\6"+
    "\1\272\22\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\20\6\1\273\4\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\15\6\1\274\7\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\14\6\1\275\10\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\14\6"+
    "\1\276\10\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\12\6\1\277\12\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\1\6\1\300\23\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\14\6\1\301\10\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\20\6"+
    "\1\302\4\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\2\6\1\303\22\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\21\6\1\304\3\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\13\6\1\305\11\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\16\6"+
    "\1\306\6\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\7\6\1\307\15\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\11\6\1\310\13\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\14\6\1\311\10\6"+
    "\27\0\2\6\1\0\3\6\1\0\1\6\6\0\2\6"+
    "\1\312\22\6\27\0\2\6\1\0\3\6\1\0\1\6"+
    "\6\0\2\6\1\313\22\6\27\0\2\6\1\0\3\6"+
    "\1\0\1\6\6\0\13\6\1\314\11\6\27\0\2\6"+
    "\1\0\3\6\1\0\1\6\6\0\1\6\1\315\23\6"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8062];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\37\1\13\11\4\1\1\0\2\11\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\1\11\30\1\1\11"+
    "\1\1\1\11\2\1\11\11\2\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\32\1\4\11\2\1\3\0\1\1"+
    "\1\0\26\1\3\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// last token used for look behind. Also needed when implementing the ITokenScanner interface
	private Symbol _lastToken;

	// flag indicating if we should collect comments or not
	private boolean _collectComments = true;

	// accumulator of consecutive vsdoc lines, later added to vsdocComments as a single entity
	private List<Symbol> _vsdocAccumulator = new ArrayList<Symbol>();

	// comment collections, by type
	private List<Symbol> _sdocComments = new ArrayList<Symbol>();
	private List<Symbol> _vsdocComments = new ArrayList<Symbol>();
	private List<Symbol> _singleLineComments = new ArrayList<Symbol>();
	private List<Symbol> _multiLineComments = new ArrayList<Symbol>();

	public JSFlexScanner()
	{
		this((Reader) null);
	}

	public Symbol getLastToken()
	{
		return _lastToken;
	}

	public List<Symbol> getSDocComments()
	{
		return _sdocComments;
	}

	public List<Symbol> getVSDocComments()
	{
		return _vsdocComments;
	}

	public List<Symbol> getSingleLineComments()
	{
		return _singleLineComments;
	}

	public List<Symbol> getMultiLineComments()
	{
		return _multiLineComments;
	}

	private Symbol newToken(JSTokenType type, Object value)
	{
		return newToken(type.getIndex(), value);
	}

	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yychar, yychar + yylength() - 1, value);
	}

	public Symbol nextToken() throws java.io.IOException, Scanner.Exception
	{
		// clear accumulators
		_vsdocAccumulator.clear();

		try
		{
			// get next token
			_lastToken = yylex();
		} 
		catch (Scanner.Exception e)
		{
			// create default token type
			String text = yytext();
			int end = yychar + text.length() - 1;

			_lastToken = new Symbol(JSTokenType.EOF.getIndex(), yychar, end, text);
		}
		finally
		{
			// process any accumulated vsdoc lines
			if (!_vsdocAccumulator.isEmpty())
			{
				Symbol vsdoc = newToken(JSTokenType.VSDOC, new ArrayList<Symbol>(_vsdocAccumulator));

				_vsdocComments.add(vsdoc);
			}
		}

		return _lastToken;
	}

	private boolean isValidDivisionStart()
	{
		if (_lastToken != null)
		{
			switch (_lastToken.getId())
			{
				case Terminals.IDENTIFIER:
				case Terminals.NUMBER:
				case Terminals.REGEX:
				case Terminals.STRING:
				case Terminals.RPAREN:
				case Terminals.PLUS_PLUS:
				case Terminals.MINUS_MINUS:
				case Terminals.RBRACKET:
				case Terminals.RCURLY:
				case Terminals.FALSE:
				case Terminals.NULL:
				case Terminals.THIS:
				case Terminals.TRUE:
					return true;
			}
		}

		return false;
	}

	public void setCollectComments(boolean flag)
	{
		_collectComments = flag;
	}

	public void setSource(String source)
	{
		yyreset(new StringReader(source));

		// clear last token
		_lastToken = null;

		// reset comment collection lists
		_singleLineComments.clear();
		_multiLineComments.clear();
		_sdocComments.clear();
		_vsdocComments.clear();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JSFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JSFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 226) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { yypushback(1);
						if (isValidDivisionStart())
						{
							yybegin(DIVISION);
						}
						else
						{
							yybegin(REGEX);
						}
          }
        case 88: break;
        case 33: 
          { if (_collectComments)
							{
								_singleLineComments.add(newToken(JSTokenType.SINGLELINE_COMMENT, yytext()));
							}
          }
        case 89: break;
        case 81: 
          { return newToken(Terminals.TYPEOF, yytext());
          }
        case 90: break;
        case 32: 
          { return newToken(Terminals.STRING, yytext());
          }
        case 91: break;
        case 24: 
          { return newToken(Terminals.RBRACKET, yytext());
          }
        case 92: break;
        case 6: 
          { return newToken(Terminals.PLUS, yytext());
          }
        case 93: break;
        case 78: 
          { return newToken(Terminals.WHILE, yytext());
          }
        case 94: break;
        case 77: 
          { return newToken(Terminals.THROW, yytext());
          }
        case 95: break;
        case 38: 
          { return newToken(Terminals.GREATER_GREATER, yytext());
          }
        case 96: break;
        case 23: 
          { return newToken(Terminals.LBRACKET, yytext());
          }
        case 97: break;
        case 75: 
          { return newToken(Terminals.BREAK, yytext());
          }
        case 98: break;
        case 82: 
          { return newToken(Terminals.DELETE, yytext());
          }
        case 99: break;
        case 31: 
          { return newToken(Terminals.PLUS_EQUAL, yytext());
          }
        case 100: break;
        case 66: 
          { return newToken(Terminals.CASE, yytext());
          }
        case 101: break;
        case 37: 
          { return newToken(Terminals.DO, yytext());
          }
        case 102: break;
        case 47: 
          { return newToken(Terminals.PIPE_PIPE, yytext());
          }
        case 103: break;
        case 62: 
          { return newToken(Terminals.EXCLAMATION_EQUAL_EQUAL, yytext());
          }
        case 104: break;
        case 55: 
          { return newToken(Terminals.TRY, yytext());
          }
        case 105: break;
        case 29: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.FORWARD_SLASH, yytext());
          }
        case 106: break;
        case 79: 
          { return newToken(Terminals.RETURN, yytext());
          }
        case 107: break;
        case 85: 
          { return newToken(Terminals.FUNCTION, yytext());
          }
        case 108: break;
        case 39: 
          { return newToken(Terminals.GREATER_EQUAL, yytext());
          }
        case 109: break;
        case 48: 
          { return newToken(Terminals.PERCENT_EQUAL, yytext());
          }
        case 110: break;
        case 16: 
          { return newToken(Terminals.MINUS, yytext());
          }
        case 111: break;
        case 27: 
          { return newToken(Terminals.COMMA, yytext());
          }
        case 112: break;
        case 74: 
          { return newToken(Terminals.FALSE, yytext());
          }
        case 113: break;
        case 18: 
          { return newToken(Terminals.QUESTION, yytext());
          }
        case 114: break;
        case 43: 
          { return newToken(Terminals.EXCLAMATION_EQUAL, yytext());
          }
        case 115: break;
        case 53: 
          { if (_collectComments)
							{
								_vsdocAccumulator.add(newToken(JSTokenType.VSDOC, yytext()));
							}
          }
        case 116: break;
        case 19: 
          { return newToken(Terminals.TILDE, yytext());
          }
        case 117: break;
        case 87: 
          { return newToken(Terminals.INSTANCEOF, yytext());
          }
        case 118: break;
        case 63: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.REGEX, yytext());
          }
        case 119: break;
        case 51: 
          { return newToken(Terminals.CARET_EQUAL, yytext());
          }
        case 120: break;
        case 22: 
          { return newToken(Terminals.RPAREN, yytext());
          }
        case 121: break;
        case 26: 
          { return newToken(Terminals.RCURLY, yytext());
          }
        case 122: break;
        case 12: 
          { return newToken(Terminals.EXCLAMATION, yytext());
          }
        case 123: break;
        case 57: 
          { return newToken(Terminals.VAR, yytext());
          }
        case 124: break;
        case 44: 
          { return newToken(Terminals.AMPERSAND_EQUAL, yytext());
          }
        case 125: break;
        case 21: 
          { return newToken(Terminals.LPAREN, yytext());
          }
        case 126: break;
        case 17: 
          { return newToken(Terminals.CARET, yytext());
          }
        case 127: break;
        case 30: 
          { return newToken(Terminals.PLUS_PLUS, yytext());
          }
        case 128: break;
        case 84: 
          { return newToken(Terminals.DEFAULT, yytext());
          }
        case 129: break;
        case 10: 
          { return newToken(Terminals.EQUAL, yytext());
          }
        case 130: break;
        case 65: 
          { return newToken(Terminals.ELSE, yytext());
          }
        case 131: break;
        case 71: 
          { return newToken(Terminals.VOID, yytext());
          }
        case 132: break;
        case 4: 
          { return newToken(Terminals.NUMBER, yytext());
          }
        case 133: break;
        case 72: 
          { return newToken(Terminals.GREATER_GREATER_GREATER_EQUAL, yytext());
          }
        case 134: break;
        case 68: 
          { return newToken(Terminals.THIS, yytext());
          }
        case 135: break;
        case 52: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.FORWARD_SLASH_EQUAL, yytext());
          }
        case 136: break;
        case 5: 
          { return newToken(Terminals.DOT, yytext());
          }
        case 137: break;
        case 25: 
          { return newToken(Terminals.LCURLY, yytext());
          }
        case 138: break;
        case 42: 
          { return newToken(Terminals.LESS_LESS, yytext());
          }
        case 139: break;
        case 40: 
          { return newToken(Terminals.EQUAL_EQUAL, yytext());
          }
        case 140: break;
        case 35: 
          { return newToken(Terminals.IF, yytext());
          }
        case 141: break;
        case 11: 
          { return newToken(Terminals.LESS, yytext());
          }
        case 142: break;
        case 15: 
          { return newToken(Terminals.PERCENT, yytext());
          }
        case 143: break;
        case 59: 
          { return newToken(Terminals.GREATER_GREATER_EQUAL, yytext());
          }
        case 144: break;
        case 58: 
          { return newToken(Terminals.GREATER_GREATER_GREATER, yytext());
          }
        case 145: break;
        case 73: 
          { if (_collectComments)
							{
								_sdocComments.add(newToken(JSTokenType.SDOC, yytext()));
							}
          }
        case 146: break;
        case 56: 
          { return newToken(Terminals.NEW, yytext());
          }
        case 147: break;
        case 14: 
          { return newToken(Terminals.PIPE, yytext());
          }
        case 148: break;
        case 9: 
          { return newToken(Terminals.GREATER, yytext());
          }
        case 149: break;
        case 54: 
          { return newToken(Terminals.FOR, yytext());
          }
        case 150: break;
        case 69: 
          { return newToken(Terminals.NULL, yytext());
          }
        case 151: break;
        case 83: 
          { return newToken(Terminals.FINALLY, yytext());
          }
        case 152: break;
        case 67: 
          { return newToken(Terminals.TRUE, yytext());
          }
        case 153: break;
        case 20: 
          { return newToken(Terminals.SEMICOLON, yytext());
          }
        case 154: break;
        case 46: 
          { return newToken(Terminals.PIPE_EQUAL, yytext());
          }
        case 155: break;
        case 50: 
          { return newToken(Terminals.MINUS_MINUS, yytext());
          }
        case 156: break;
        case 41: 
          { return newToken(Terminals.LESS_EQUAL, yytext());
          }
        case 157: break;
        case 61: 
          { return newToken(Terminals.LESS_LESS_EQUAL, yytext());
          }
        case 158: break;
        case 8: 
          { return newToken(Terminals.STAR, yytext());
          }
        case 159: break;
        case 28: 
          { return newToken(Terminals.COLON, yytext());
          }
        case 160: break;
        case 60: 
          { return newToken(Terminals.EQUAL_EQUAL_EQUAL, yytext());
          }
        case 161: break;
        case 45: 
          { return newToken(Terminals.AMPERSAND_AMPERSAND, yytext());
          }
        case 162: break;
        case 86: 
          { return newToken(Terminals.CONTINUE, yytext());
          }
        case 163: break;
        case 49: 
          { return newToken(Terminals.MINUS_EQUAL, yytext());
          }
        case 164: break;
        case 64: 
          { if (_collectComments)
							{
								_multiLineComments.add(newToken(JSTokenType.MULTILINE_COMMENT, yytext()));
							}
          }
        case 165: break;
        case 2: 
          { /* ignore */
          }
        case 166: break;
        case 36: 
          { return newToken(Terminals.IN, yytext());
          }
        case 167: break;
        case 76: 
          { return newToken(Terminals.CATCH, yytext());
          }
        case 168: break;
        case 34: 
          { return newToken(Terminals.STAR_EQUAL, yytext());
          }
        case 169: break;
        case 3: 
          { return newToken(Terminals.IDENTIFIER, yytext());
          }
        case 170: break;
        case 13: 
          { return newToken(Terminals.AMPERSAND, yytext());
          }
        case 171: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
				yybegin(YYINITIAL);
				throw new Scanner.Exception("Unexpected character '" + yytext() + "' around offset " + yychar);
          }
        case 172: break;
        case 80: 
          { return newToken(Terminals.SWITCH, yytext());
          }
        case 173: break;
        case 70: 
          { return newToken(Terminals.WITH, yytext());
          }
        case 174: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
