<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml" />
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml" />

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		
		<!-- Need to grab version qualifier for scripting plugin, we do that by cloning and checking 
		last commit of each bundle vs last commit of plugin. This MUST be done before the generateScript target
		or else the qualifier we insert into build.properties is ignored.  -->
		<property name="scripting.plugin.dir" location="${buildDirectory}/plugins/com.aptana.scripting"/>
		<property name="bundle.timestamps.file" location="${scripting.plugin.dir}/bundle_timestamps.txt"/>

		<!-- Find latest commit date between this plugin and every bundle and use that as the build qualifier! -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}" append="true" output="${bundle.timestamps.file}">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>
		<echo append="true" file="${bundle.timestamps.file}" message="," />
		<!-- Grab the pre-defined set of bundles -->
		<antcall target="clone-bundle">
			<param name="bundle.name" value="text.ruble" />
			<param name="bundle.dir.name" value="text.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="source.ruble" />
			<param name="bundle.dir.name" value="source.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="math.ruble" />
			<param name="bundle.dir.name" value="math.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="ruby.ruble" />
			<param name="bundle.dir.name" value="ruby.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="rails.ruble" />
			<param name="bundle.dir.name" value="rails.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="html.ruble" />
			<param name="bundle.dir.name" value="html.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="css.ruble" />
			<param name="bundle.dir.name" value="css.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="js.ruble" />
			<param name="bundle.dir.name" value="js.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="xml.ruble" />
			<param name="bundle.dir.name" value="xml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="bundle-dev.ruble" />
			<param name="bundle.dir.name" value="bundle-development.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="haml.ruble" />
			<param name="bundle.dir.name" value="haml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="sass.ruble" />
			<param name="bundle.dir.name" value="sass.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="json.ruble" />
			<param name="bundle.dir.name" value="json.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="rspec.ruble" />
			<param name="bundle.dir.name" value="rspec.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="cucumber.ruble" />
			<param name="bundle.dir.name" value="cucumber.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="yaml.ruble" />
			<param name="bundle.dir.name" value="yaml.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="capistrano.ruble" />
			<param name="bundle.dir.name" value="capistrano.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="heroku.ruble" />
			<param name="bundle.dir.name" value="heroku.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="shell-script.ruble" />
			<param name="bundle.dir.name" value="shell-script.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="php.ruble" />
			<param name="bundle.dir.name" value="php.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="engineyard.ruble" />
			<param name="bundle.dir.name" value="engineyard.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<antcall target="clone-bundle">
			<param name="bundle.name" value="coffeescript.ruble" />
			<param name="bundle.dir.name" value="coffeescript.ruble" />
			<param name="bundle.branch" value="${scs.branch.name}" />
		</antcall>
		<!-- Now grab the max value of lastmods in bundle_timestamps.txt file and use that as qualifier! -->
		<script language="javascript">
			<![CDATA[
					importPackage(java.lang, java.util, java.io);

					// The main method (called from the bottom of the file).
					function main() {
						var basedir = project.getProperty("scripting.plugin.dir");
						
						var timestamps = new File(basedir, "bundle_timestamps.txt");
						var reader = new BufferedReader(new FileReader(timestamps));
					    var line = reader.readLine();
						System.out.println(line);
						reader.close();
						var max = 0;
						var numbers = line.split(",");
						for (var i = 0; i < numbers.length; i++) {
							new_number = parseInt(numbers[i]);
							if (new_number > max)
							{
								max = new_number;
							}
						}
						System.out.println("Max timestamp of scripting plugin and bundles: " + max);
					    // Write the max number into the qualifier!
					    var writer = new FileWriter(new File(basedir, "build.properties"), true);
						writer.write("qualifier = " + max + "\n");
						writer.close();
					}

					main();
				]]>
				</script>
	</target>

	<target name="clone-bundle">
		<delete dir="${bundle.dir.name}" failonerror="true" />
		<echo message="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}">
		</echo>
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" />
		</exec>
		<!-- Checkout the specified branch -->
		<echo message="git checkout ${bundle.branch}">
		</echo>
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true">
			<arg value="-c" />
			<arg value="git checkout ${bundle.branch}" />
		</exec>
		<!-- Grab lastmod and append it to file containing all of the lastmods for each packaged ruble -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" append="true" output="${bundle.timestamps.file}" failonerror="true">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct' ." />
		</exec>

		<echo append="true" file="${bundle.timestamps.file}" message="," />
		<!-- Now remove the .git subdirectory -->
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}/.git" quiet="true" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="signJars" />
		<antcall target="gatherLogs" />
		<antcall target="fix.broken.metadata" />
		<antcall target="updateSite" />
		<antcall target="publish" />
	</target>

	<target name="signJars" if="sign.jars">
		<echo message="Signing plugins and features at: ${p2.repo.dir}" />
		<p2.process.artifacts repositoryPath="${p2.artifact.repo}">
			<sign alias="${keystoreAlias}" keystore="${keystore}" storepass="${keystorePass}" />
		</p2.process.artifacts>
	</target>

	<!-- Workaround for Eclipse bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=271373 -->
	<target name="fix.broken.metadata">
		<!-- Unzip the content.jar -->
		<unzip dest="${p2.repo.dir}" src="${p2.repo.dir}/content.jar" />
		<delete file="${p2.repo.dir}/content.jar" />
		<!-- Fix the broken OSGi filter syntax -->
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.arch=x86,x86_64)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.arch=x86)(osgi.arch=x86_64))]]></replacevalue>
		</replace>
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.os=macosx,win32)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.os=macosx)(osgi.os=win32))]]></replacevalue>
		</replace>
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.os=aix,hpux,linux,qnx,solaris)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.os=aix)(osgi.os=hpux)(osgi.os=linux)(osgi.os=qnx)(osgi.os=solaris))]]></replacevalue>
		</replace>
		<!-- Re-zip content.xml into content.jar -->
		<zip destfile="${p2.repo.dir}/content.jar">
			<zipfileset dir="${p2.repo.dir}">
				<include name="content.xml" />
			</zipfileset>
		</zip>
		<delete file="${p2.repo.dir}/content.xml" />
	</target>

	<target name="updateSite">
		<copy file="${builder}/update_site/site.xml" tofile="${p2.repo.dir}/site.xml" />
		<pathconvert property="version.full">
			<fileset dir="${p2.repo.dir}/features">
				<include name="${topLevelElementId}_*.jar" />
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="${topLevelElementId}_*.jar" to="*" casesensitive="yes" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<replace token="{version.full}" value="${version.full}" file="${p2.repo.dir}/site.xml" />
		<zip destfile="${buildDirectory}/${topLevelElementId}-${version.full}.zip">
			<fileset dir="${p2.repo.dir}" defaultexcludes="false" />
		</zip>
		<move file="${buildDirectory}/${topLevelElementId}-${version.full}.zip" todir="${p2.repo.dir}" />
		<copy file="${builder}/update_site/index.html" tofile="${p2.repo.dir}/index.html" />
		<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${p2.repo.dir}/index.html" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<copy todir="${deploy.dir}" failonerror="true">
			<fileset dir="${p2.repo.dir}" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>
</project>
