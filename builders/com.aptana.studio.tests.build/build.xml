<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     April 20, 2009 2:43:07 PM                                                        

     Studio Tests
     Tests the Studio core feature
  
     cwilliams                                                                
     ====================================================================== -->
<project name="Studio" default="test">
	<description>
            Tests the RED_Core feature
    </description>

	<property file="build_local.properties" />

	<!-- Set up EMMA location and instrumentation path -->
	<path id="emma.lib">
		<pathelement location="lib/emma.jar" />
		<pathelement location="lib/emma_ant.jar" />
	</path>
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<path id="instrument.classpath">
		<fileset dir="${baseLocation}/plugins">
			<include name="com.aptana.*" />
		</fileset>
	</path>
	<path id="source.path">
		<dirset dir="${buildDirectory}/plugins">
			<include name="*/src" />
		</dirset>
	</path>

	<!-- ================================= 
          target: build              
         ================================= -->
	<target name="build" description="Builds the Studio Tests feature" depends="generate.build.properties,generate.base">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/build.xml -Dbuilder=${basedir} -Dbuild.revision=${build.revision} -nosplash" />
		</java>
	</target>

	<!-- ================================= 
          target: generate.build.properties              
         ================================= -->
	<target name="generate.build.properties" description="Takes in properties from build_local.properties and the command line overrides and generates a combined build.properties to use for the build">
		<exec executable="hostname" outputproperty="computer.hostname"/>
		<echoproperties destfile="build.properties">
			<propertyset negate="true">
				<propertyref prefix="java." />
				<propertyref prefix="ant." />
				<propertyref prefix="awt." />
				<propertyref prefix="user." />
				<propertyref prefix="sun." />
			</propertyset>
		</echoproperties>
	</target>

	<!-- ================================= 
	      target: clean              
	     ================================= -->
	<target name="clean" depends="generate.build.properties" description="Clean up temp and build files">
		<delete failonerror="false">
			<fileset dir="${buildDirectory}" defaultexcludes="true">
				<include name="assemble.*" />
				<include name="finalFeaturesVersions.*" />
				<include name="finalPluginsVersions.*" />
				<include name="package.*" />
			</fileset>
		</delete>
		<delete dir="${coverageDirectory}" failonerror="false" />
		<delete dir="${testResultsDirectory}" failonerror="false" />
		<delete dir="${buildDirectory}/${buildLabel}" failonerror="false" />
		<delete dir="${baseLocation}" />
		<delete dir="${buildDirectory}/features/org.eclipse.pde.build.container.feature" failonerror="false" />
		<delete file="build.properties" failonerror="false" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: clean.after                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="clean.after" if="cleanAfter">
		<antcall target="clean" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: generate.base                      
         - - - - - - - - - - - - - - - - - -->
	<target name="generate.base" depends="copy.base.windows,copy.base">
		<!-- Wipe the non-test plugins-->
		<antcall target="wipe.plugins" />
		<!-- Copy test plugins into plugins dir -->
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${buildDirectory}/tests">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: wipe.plugins                      
         - - - - - - - - - - - - - - - - - -->
	<target name="wipe.plugins" unless="dont.wipe.plugins">
		<delete verbose="false">
			<fileset dir="${buildDirectory}/plugins">
				<include name="**/*" />
			</fileset>
		</delete>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copy.base                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base" unless="is.windows">
		<!-- Copy over the original base eclipse to a new location.
						Have to use exec cp to retain permissions on *nix, Mac -->
		<exec executable="cp">
			<arg line="-R ${vanilla.eclipse} ${baseLocation}" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copy.base.windows                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base.windows" if="is.windows">
		<copy todir="${baseLocation}">
			<fileset dir="${vanilla.eclipse}" includes="**/*" defaultexcludes="false" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
		  target: run.director                      
		 - - - - - - - - - - - - - - - - - -->
	<target name="run.director" description="Runs the p2 director installs">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="true" dir="${baseLocation}" timeout="900000">
			<arg line="-application org.eclipse.equinox.p2.director" />
			<arg line="-nosplash" />
			<arg line="-consoleLog" />
			<arg line="-repository ${p2.repo}" />
			<arg line="-installIU ${p2.installIU}" />
		</java>
	</target>

	<target name="-pre-test" description="Install test features and do pre-test setup.">
		<!-- Unzip Eclipse Testing Framework and... -->
		<unzip src="eclipse-test-framework-3.6.zip" dest="${baseLocation}/dropins" />
		<!-- Install the test feature we just built along with eclipse test framework -->
		<antcall target="run.director">
			<param name="p2.installIU" value="com.aptana.feature.feature.group,com.windowtester.runtime.feature.group,${topLevelElementId}.feature.group" />
			<param name="p2.repo" value="${studio3.p2.repo},${windowtester.p2.repo},file:${deploy.dir}" />
		</antcall>
		<!-- Modify the plugin_custimization.ini to set initial properties for tests! -->
		<concat append="true" destfile="${baseLocation}/plugins/org.eclipse.sdk_3.6.0.v201006080911/plugin_customization.ini">
			<filelist dir="${basedir}/prefs" files="plugin_customization.ini" />
		</concat>
	</target>

	<target name="-post-test" description="Collect all test results into single file and move to results directory.">
		<ant target="collect" antfile="${library-file}" dir="${baseLocation}">
			<property name="includes" value="com*.xml" />
			<property name="output-file" value="test-results.xml" />
		</ant>
		<move file="${baseLocation}/test-results.xml" todir="${testResultsDirectory}" />
	</target>

	<target name="-instrument" description="Instrument the code using EMMA. Call before running tests. Call '-coverage' to produce reports after.">
		<emma enabled="true">
			<instr instrpathref="instrument.classpath" mode="overwrite" metadatafile="${coverageDirectory}/metadata.emma">
				<filter file="emma-filters.txt" />
			</instr>
		</emma>
	</target>

	<target name="-coverage" description="Produce coverage analysis docs using EMMA. Assumes '-instrument' was called before running the tests.">
		<emma enabled="true">
			<report>
				<fileset dir="${coverageDirectory}">
					<include name="*.emma" />
				</fileset>

				<txt outfile="${coverageDirectory}/coverage.txt" />
				<html outfile="${coverageDirectory}/coverage.html" encoding="UTF-8" />
				<xml outfile="${coverageDirectory}/coverage.xml" depth="method" />
			</report>
		</emma>
	</target>

	<target name="test" depends="build">
		<antcall target="-pre-test" />
		<antcall target="-instrument" />

		<!-- Run the tests. -->
		<antcall target="run-core-test">
			<param name="test.plugin" value="com.aptana.studio.tests.all" />
			<param name="test.classname" value="com.aptana.studio.tests.all.CoreTests" />
		</antcall>
		<antcall target="run-ui-test">
			<param name="test.plugin" value="com.aptana.studio.tests.all" />
			<param name="test.classname" value="com.aptana.studio.tests.all.UITests" />
		</antcall>

		<antcall target="-post-test" />
		<antcall target="-coverage" />
		<antcall target="clean.after" />
	</target>

	<target name="performance" depends="build">
		<antcall target="-pre-test" />

		<!-- Run the tests. -->
		<antcall target="run-perf-test">
			<param name="test.plugin" value="com.aptana.studio.tests.all" />
			<param name="test.classname" value="com.aptana.studio.tests.all.PerformanceTests" />
		</antcall>

		<antcall target="-post-test" />
		<antcall target="clean.after" />
	</target>

	<target name="run-ui-test">
		<ant target="ui-test" antfile="${library-file}" dir="${baseLocation}">
			<reference refid="emma.lib" />
			<property name="extra.java-test.classpath" value="emma.lib" />
			<property name="timeout" value="${test.timeout}" />
			<property name="os" value="${baseos}" />
			<property name="ws" value="${basews}" />
			<property name="arch" value="${basearch}" />
			<property name="eclipse-home" value="${baseLocation}" />
			<property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
			<property name="plugin-name" value="${test.plugin}" />
			<property name="classname" value="${test.classname}" />
			<property name="extraVMargs" value="-ea -Demma.coverage.out.file=${coverageDirectory}/coverage.emma -Dosgi.dev=${basedir}/lib/emma.jar -Djunit.properties=${basedir}/build.properties" />
		</ant>
	</target>

	<target name="run-core-test">
		<ant target="core-test" antfile="${library-file}" dir="${baseLocation}">
			<reference refid="emma.lib" />
			<property name="extra.java-test.classpath" value="emma.lib" />
			<property name="timeout" value="${test.timeout}" />
			<property name="os" value="${baseos}" />
			<property name="ws" value="${basews}" />
			<property name="arch" value="${basearch}" />
			<property name="eclipse-home" value="${baseLocation}" />
			<property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
			<property name="plugin-name" value="${test.plugin}" />
			<property name="classname" value="${test.classname}" />
			<property name="extraVMargs" value="-Demma.coverage.out.file=${coverageDirectory}/coverage.emma -Dosgi.dev=${basedir}/lib/emma.jar -Djunit.properties=${basedir}/build.properties" />
		</ant>
	</target>
	
	<target name="run-perf-test">
    <ant target="ui-test" antfile="${library-file}" dir="${baseLocation}">
      <reference refid="emma.lib" />
      <property name="extra.java-test.classpath" value="emma.lib" />
      <property name="timeout" value="${test.timeout}" />
      <property name="os" value="${baseos}" />
      <property name="ws" value="${basews}" />
      <property name="arch" value="${basearch}" />
      <property name="eclipse-home" value="${baseLocation}" />
      <property name="data-dir" value="${baseLocation}/junit-workspace -clean" />
      <property name="plugin-name" value="${test.plugin}" />
      <property name="classname" value="${test.classname}" />
      <property name="extraVMargs" value="-ea -Demma.coverage.out.file=${coverageDirectory}/coverage.emma -Dosgi.dev=${basedir}/lib/emma.jar -Djunit.properties=${basedir}/build.properties -Declipse.perf.dbloc= -Declipse.perf.config=build=R3.0.0beta;host=${computer.hostname};jvm=1.6.0_03-b05 -Declipse.perf.assertAgainst=build=R3.0.0beta -Dsetup.override.eclipseArgs=vm=/usr/bin/java" />
    </ant>
  </target>
</project>
